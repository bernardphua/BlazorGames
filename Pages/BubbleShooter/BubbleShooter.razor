@page "/BubbleShooter"

@using BlazorGames.Models.BubbleShooter
@using System.Timers

@inject IJSRuntime jsRuntime
@inject NavigationManager navMgr

@implements IDisposable


<h4 style="user-select:none;">Blazor Bubble Shooter Game <span style="font-size:x-small"> (v.0.3.2)</span></h4>

<div class="mb-1">
    <button class="btn btn-primary" disabled="@StartGameButtonDisabled" @onclick="StartGame">Start Game</button>
    <button class="btn btn-info" @onclick="RestartGame">Restart Game</button>
    <span style="font-weight:bold; user-select:none;">Score: @score</span>
    <span style="font-weight:bold; padding-left:10px; user-select:none">Timer: @timeElapsed</span>
</div>
<canvas id="canvas" @ref="cvs" style="border: 8px solid orange;" @onclick="HandleClick"></canvas>
<audio id="MainGameAudio" loop>
    <source id="MainGameAudioSource">
</audio>
<audio id="ShootAudio">
    <source id="ShootAudioSource">
</audio>
<audio id="GameOverAudio">
    <source id="GameOverAudioSource">
</audio>
<audio id="CollisionAudio">
    <source id="CollisionAudioSource">
</audio>

@code {

    private int canvasWidth, canvasHeight = 0;
    private ElementReference cvs;
    private Context2D ctx;
    private IJSObjectReference jsModule;
    private Player player;
    private List<Projectile> projectiles = new List<Projectile>();
    private List<Enemy> enemies = new List<Enemy>();
    private List<Particle> particules = new List<Particle>();
    private int animationId = 0;
    private DotNetObjectReference<BubbleShooter> dotNetRef;
    private System.Timers.Timer timer;
    private System.Timers.Timer gameTimer;
    private bool gameOver = true;
    private bool StartGameButtonDisabled = false;
    private int score = 0;
    private string timeElapsed = "";
    private TimeSpan interval;
    private DateTime gameStartDateTime;
    private DateTime lastTimeStamp;
    private string baseUrl;
    private readonly double targetFramePerSecond = 60; //0.016667;
    private TimeSpan ticksDelta;
    double enemySpeed = 1;

    private Random rnd = new Random();

    protected override void OnInitialized()
    {
        baseUrl = navMgr.BaseUri;
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create<BubbleShooter>(this);
            timer = new System.Timers.Timer(1000);
            gameTimer = new System.Timers.Timer(1000 / targetFramePerSecond);
            timer.Elapsed += CreateEnemy;
            gameTimer.Elapsed += GameLoopElapsed;
            jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/blazorgames.js");
            var y = await jsModule.InvokeAsync<int>("GetWindowInnerHeight");
            var x = await jsModule.InvokeAsync<int>("GetWindowInnerWidth");
            canvasHeight = Convert.ToInt32(y * 0.65);
            canvasWidth = Convert.ToInt32(x * 0.65);
            await jsModule.InvokeVoidAsync("SetCanvasDimension", "canvas", canvasWidth, canvasHeight);
            ctx = await jsRuntime.GetContext2DAsync(cvs);
            await ctx.FillStyleAsync("black");
            await ctx.FillRectAsync(0, 0, canvasWidth, canvasHeight);
            player = new Player(ctx, canvasWidth / 2, canvasHeight / 2, 20, "white");
            player.Draw();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void StartGame()
    {
        gameOver = false;
        StartGameButtonDisabled = true;
        animationId = 0;
        enemySpeed = 1;
        lastTimeStamp = DateTime.Now;
        gameStartDateTime = DateTime.Now;
        jsModule.InvokeVoidAsync("PlayAudio", "MainGameAudio", "MainGameAudioSource", baseUrl + "sounds/bubbleShooter/Tap-Till-You-Snap.mp3");
        //jsModule.InvokeVoidAsync("StartGame", dotNetRef);
        timer.Enabled = true;
        gameTimer.Enabled = true;
    }

    private void RestartGame()
    {
        EndGame(animationId);
        projectiles.Clear();
        enemies.Clear();
        particules.Clear();

        ctx.FillStyleAsync("rgba(0, 0, 0, 0)");
        ctx.FillRectAsync(0, 0, canvasWidth, canvasHeight);
        player.Draw();

        score = 0;
        StartGame();
    }

    private void CreateEnemy(Object source, ElapsedEventArgs args)
    {
        int radius = rnd.Next(6, 40);
        int x = 0;
        int y = 0;
        string color = $"hsl({rnd.Next(360)}, 100%, 50%)";


        if (enemies.Count > 5)
            return;

        if (rnd.NextDouble() < 0.5)
        {
            x = rnd.NextDouble() < 0.5 ? 0 - radius : canvasWidth + radius;
            y = rnd.Next(canvasHeight);
        }
        else
        {
            y = rnd.NextDouble() < 0.5 ? 0 - radius : canvasHeight + radius;
            x = rnd.Next(canvasWidth);
        }

        //if (interval.TotalSeconds % 10 == 0)
        //    enemySpeed += rnd.NextDouble() / 2;

        var angle = Math.Atan2(canvasHeight / 2 - y, canvasWidth / 2 - x);
        var velocity = new Velocity(Math.Cos(angle) * enemySpeed, Math.Sin(angle) * enemySpeed);

        Enemy enemy = new Enemy(x, y, radius, color, velocity);
        enemies.Add(enemy);
    }

    private async void GameLoopElapsed(Object source, ElapsedEventArgs args)
    {
        animationId++;
        await GameLoop(animationId);
    }

    [JSInvokable]
    public async Task GameLoop(int AnimiationId)
    {
        //Console.WriteLine($"Enemy:{enemies.Count}, Projectiles:{projectiles.Count}, Particules:{particules.Count}");

        ticksDelta = DateTime.Now - lastTimeStamp;
        interval = DateTime.Now - gameStartDateTime;
        timeElapsed = $"{interval.Minutes}:{interval.Seconds}:{interval.Milliseconds} Frame Per Second: {1 / ticksDelta.TotalSeconds:N2}";
        StateHasChanged();
        lastTimeStamp = DateTime.Now;
        List<Projectile> toRemoveProjectiles = new List<Projectile>();
        List<Enemy> toRemoveEnemies = new List<Enemy>();
        double dist = 0;

        animationId = AnimiationId;
        await ctx.FillStyleAsync("rgba(0, 0, 0, 0.18)");
        await ctx.FillRectAsync(0, 0, canvasWidth, canvasHeight);
        player.Draw();

        await using (var c = await ctx.CreateBatchAsync())
        {
            foreach (var p in projectiles)
            {
                p.Update(c);
                if (p.x + p.radius < 0 || p.x - p.radius > canvasWidth ||
                    p.y + p.radius < 0 || p.y - p.radius > canvasHeight)
                {
                    toRemoveProjectiles.Add(p);
                    score -= 10;
                }
            }
            projectiles.RemoveAll(toRemoveProjectiles.Contains);
            toRemoveProjectiles.Clear();

            for (int i = particules.Count - 1; i > 0; i--)
            {
                if (particules[i].alpha <= 0)
                    particules.RemoveAt(i);
                else
                    particules[i].Update(c);
            }

            foreach (var (enemy, ememyIndex) in enemies.Select((v, i) => (v, i)))
            {
                enemy.Update(c);

                dist = Math.Sqrt(Math.Pow(player.x - enemy.x, 2) + Math.Pow(player.y - enemy.y, 2));
                if (dist - enemy.radius - player.radius < 1)
                {
                    EndGame(animationId);
                    await c.FillStyleAsync("Cornsilk");
                    await c.FillRectAsync(0, canvasHeight / 2 - 70, canvasWidth, 100);
                    await c.LineWidthAsync(15);
                    await c.StrokeStyleAsync(0, 0, canvasWidth, canvasHeight, (0, "magenta"), (0.5, "blue"), (1.0, "red"));
                    await c.StrokeRectAsync(0, canvasHeight / 2 - 70, canvasWidth, 100);
                    await c.FontAsync("900 35px Comic Sans MS");
                    await c.TextAlignAsync(TextAlign.Center);
                    await c.FillStyleAsync(canvasWidth / 2 - 100, canvasHeight / 2, canvasWidth / 2 + 100, canvasHeight / 2 + 100, (0, "magenta"), (0.5, "blue"), (1.0, "red"));
                    await c.FillTextAsync("Game Over", canvasWidth / 2, canvasHeight / 2 - 2);
                    break;
                }


                foreach (var (p, index) in projectiles.Select((v, i) => (v, i)))
                {
                    dist = Math.Sqrt(Math.Pow(p.x - enemy.x, 2) + Math.Pow(p.y - enemy.y, 2));
                    if (dist - enemy.radius - p.radius < 1)
                    {
                        score += 10;
                        await jsModule.InvokeVoidAsync("PlayAudio", "CollisionAudio", "CollisionAudioSource", baseUrl + "sounds/bubbleShooter/explosion.wav");

                        for (int i = 0; i < rnd.Next(5, Convert.ToInt32(Math.Ceiling(enemy.radius / 2 + 5))); i++)
                            particules.Add(new Particle(p.x, p.y, rnd.Next(2, 3), enemy.color, new Velocity((rnd.NextDouble() - 0.5) * rnd.Next(8, 10), (rnd.NextDouble() - 0.5) * rnd.Next(8, 10))));

                        toRemoveProjectiles.Add(p);
                        if (enemy.radius - 10 > 10)
                        {
                            //await jsRuntime.InvokeVoidAsync("gsap", "enmy", "{radius: emeny.radius - 10}");
                            enemy.radius -= 10;
                        }
                        else
                        {
                            toRemoveEnemies.Add(enemy);
                        }
                    }
                }
                projectiles.RemoveAll(toRemoveProjectiles.Contains);
                toRemoveProjectiles.Clear();
                //Console.WriteLine($"Ememy {ememyIndex} Velocity X:{enemy.velocity.x}  Y:{enemy.velocity.y}");
            }
            enemies.RemoveAll(toRemoveEnemies.Contains);
            toRemoveEnemies.Clear();
        }
    }

    private void HandleClick(MouseEventArgs e)
    {
        if (gameOver)
            return;

        var angle = Math.Atan2(e.OffsetY - canvasHeight / 2, e.OffsetX - canvasWidth / 2);
        var velocity = new Velocity(Math.Cos(angle) * 6, Math.Sin(angle) * 6);

        Projectile projectile = new Projectile(canvasWidth / 2, canvasHeight / 2, 5, "white", velocity);
        projectiles.Add(projectile);

        jsModule.InvokeVoidAsync("PlayAudio", "ShootAudio", "ShootAudioSource", baseUrl + "sounds/bubbleShooter/Gun-Luger.wav");

    }

    private void EndGame(int animationFrameId)
    {
        gameOver = true;
        timer.Enabled = false;
        gameTimer.Enabled = false;
        if (animationFrameId > 0)
        {
            //jsModule.InvokeVoidAsync("StopAnimation", animationFrameId);
        }
        jsModule.InvokeVoidAsync("PlayAudio", "GameOverAudio", "GameOverAudioSource", baseUrl + "sounds/bubbleShooter/gameover.wav");
        jsModule.InvokeVoidAsync("StopAudio", "MainGameAudio");
    }

    public void Dispose()
    {
        if (animationId > 0)
        {
            jsModule.InvokeVoidAsync("StopAnimation", animationId);
        }

        dotNetRef?.Dispose();
        timer?.Dispose();
        gameTimer?.Dispose();
    }
}
