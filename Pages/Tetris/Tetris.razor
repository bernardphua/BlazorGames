@page "/Tetris"
@inject IJSRuntime jsRuntime
@inject NavigationManager navMgr

@using BlazorGames.Models.Tetris

@implements IDisposable


<h3>Blazor Tetris Game<span style="font-size:x-small"> (v0.1.6)</span></h3>
<div @onkeydown="KeyPressed" @ontouchmove="TouchMove" @ontouchstart="TouchStart" @ontouchmove:preventDefault="true">
    <div>
        Score: <div id="score">@score</div>
        <button class="btn btn-primary" @onclick="StartGame" autofocus>Start</button>
        <button class="btn btn-warning" @onclick="Reset" autofocus>Reset</button>
    </div>
    <div id="board" style="display:flex">
        <div>
            <Canvas id="canvas" @ref="cvs" width="200" height="400" style="border: 8px solid orange;"></Canvas>
        </div>
        <div id="timerCounter">
            Time: @timeCounter
        </div>
    </div>
    <audio id="MainGameAudio" loop>
        <source id="MainGameAudioSource">
    </audio>
    <audio id="ClearAudio">
        <source id="ClearAudioSource">
    </audio>
    <audio id="GameOverAudio">
        <source id="GameOverAudioSource">
    </audio>
    <audio id="LevelUpAudio">
        <source id="LevelUpAudioSource">
    </audio>
    <div>
        <h6><em>Swipe Left, Right &amp; Down to move Tetromino. Swipe Up or Double tap to rotate Tetromino.</em></h6>
        <h6>Speed: @speed  Level-up Points: @levelUpPoints</h6>
    </div>
</div>

@code {
    private Canvas cvs;
    private Context2D ctx;
    private int score = 0;
    private string[,] board = new string[ROW, COL];
    private List<Piece> Pieces = new List<Piece>();
    private Tetromino tetromino = new Tetromino();
    private bool gameOver = true;
    private Piece gamePiece;
    private Timer timer;
    private int speed = 1000;
    private int timeCounter = 0;
    private IJSObjectReference module;
    private string baseUrl;
    double xDown, yDown = 0;
    private DateTime lastKeyedTime, lastTapTime = DateTime.Now;
    private int levelUpPoints = 10;

    const int KEYSPEED = 80;
    const int ROW = 20;
    const int COL = 10;
    const int SQ = 20;
    const string VACANT = "Gray";


    protected override void OnInitialized()
    {
        baseUrl = navMgr.BaseUri;

        Pieces.Add(new Piece(tetromino.Z, "red"));
        Pieces.Add(new Piece(tetromino.S, "green"));
        Pieces.Add(new Piece(tetromino.T, "yellow"));
        Pieces.Add(new Piece(tetromino.O, "blue"));
        Pieces.Add(new Piece(tetromino.L, "purple"));
        Pieces.Add(new Piece(tetromino.I, "cyan"));
        Pieces.Add(new Piece(tetromino.J, "orange"));
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ctx = await cvs.GetContext2DAsync();
            clearBoard();

            module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/blazorgames.js");
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void clearBoard()
    {
        for (int r = 0; r < ROW; r++)
        {
            for (int c = 0; c < COL; c++)
            {
                board[r, c] = VACANT;
            }
        }
        drawBoard();
    }

    protected void StartGame()
    {
        module.InvokeVoidAsync("PlayAudio", "MainGameAudio", "MainGameAudioSource", baseUrl + "sounds/tetris/Tetris.ogg");
        gamePiece = randomPiece();
        gameOver = false;
        score = 0;
        speed = 1000;
        timeCounter = 0;
        levelUpPoints = 10;
        timer?.Dispose();
        timer = new Timer(Drop, null, 1000, 1000);
    }

    protected async Task Reset()
    {
        await module.InvokeVoidAsync("StopAudio", "MainGameAudio");
        clearBoard();
        StartGame();
    }

    protected void KeyPressed(KeyboardEventArgs args)
    {
        if (gameOver)
            return;

        if ((DateTime.Now - lastKeyedTime).TotalMilliseconds > KEYSPEED)
        {
            lastKeyedTime = DateTime.Now;
            switch (args.Code)
            {
                case "ArrowLeft":
                    PieceMoveLeft(gamePiece);
                    break;
                case "ArrowRight":
                    PieceMoveRight(gamePiece);
                    break;
                case "ArrowDown":
                    PieceMoveDown(gamePiece);
                    break;
                case "ArrowUp":
                    PieceRotate(gamePiece);
                    break;
                default:
                    Console.WriteLine($"Key {args.Key} Code {args.Code}");
                    break;
            }
        }
    }

    protected void TouchStart(TouchEventArgs arg)
    {
        if (gameOver)
            return;

        if (arg.Touches.Length == 0)
        {
            xDown = yDown = 0;
        }
        else
        {
            xDown = arg.Touches[0].ClientX;
            yDown = arg.Touches[0].ClientY;
        }

        // To detect double tap on the screen.
        var tapElapse = (DateTime.Now - lastTapTime).TotalMilliseconds;
        if (tapElapse < 200 && tapElapse > 0)
        {
            PieceRotate(gamePiece);
        }

        lastTapTime = DateTime.Now;
    }

    protected void TouchMove(TouchEventArgs arg)
    {
        if (gameOver)
            return;

        if (xDown == 0 || yDown == 0)
            return;

        double xUp, yUp = 0; 

        xUp = arg.Touches.FirstOrDefault().ClientX;
        yUp = arg.Touches.FirstOrDefault().ClientY;

        var xDiff = xDown - xUp;
        var yDiff = yDown - yUp;


        if (Math.Abs(xDiff) > Math.Abs(yDiff))
        {
            if (xDiff > 0)
            {
                PieceMoveLeft(gamePiece);
            }
            else
            {
                PieceMoveRight(gamePiece);
            }
        }
        else
        {
            //swipeDirection = "Swipe Up/Down";
            //PieceMoveDown(gamePiece);
            if (yDiff > 0)
            {
                PieceRotate(gamePiece);
            }
            else
            {
                PieceMoveDown(gamePiece);
            }
        }
        xDown = yDown = 0;
    }

    protected void Drop(object state)
    {
        timeCounter++;
        PieceMoveDown(gamePiece);

        InvokeAsync(() => StateHasChanged());
        if (gameOver)
            timer.Dispose();
    }

    private void drawBoard()
    {
        int r, c;

        for (r = 0; r < ROW; r++)
        {
            for (c = 0; c < COL; c++)
            {
                drawSquare(c, r, board[r, c]);
            }
        }
    }

    private void drawSquare(int x, int y, string color)
    {
        ctx.FillStyleAsync(color);
        ctx.FillRectAsync(x * SQ, y * SQ, SQ, SQ);
        ctx.StrokeAsync("black");
        ctx.StrokeRectAsync(x * SQ, y * SQ, SQ, SQ);
    }

    private Piece randomPiece()
    {
        Random rnd = new Random();
        int r = rnd.Next(Pieces.Count);
        return new Piece(Pieces[r].TetrominoPiece, Pieces[r].Color);
    }

    private void PieceFill(Piece piece, string color)
    {
        for (int r = 0; r < piece.ActiveTetromino.GetLength(0); r++)
        {
            for (int c = 0; c < piece.ActiveTetromino.GetLength(1); c++)
            {
                if (piece.ActiveTetromino[r, c] == 1)
                {
                    drawSquare(piece.x + c, piece.y + r, color);
                }
            }
        }
    }

    private void PieceDraw(Piece piece)
    {
        PieceFill(piece, piece.Color);
    }

    private void PieceUndraw(Piece piece)
    {
        PieceFill(piece, VACANT);
    }

    private void PieceMoveDown(Piece piece)
    {
        if (!PieceCollision(0, 1, piece.ActiveTetromino))
        {
            PieceUndraw(piece);
            piece.y++;
            PieceDraw(piece);
        }
        else
        {
            // we lock the piece and generate a new one
            PieceLock(piece);
            gamePiece = null;
            gamePiece = randomPiece();

        }
    }

    private void PieceMoveRight(Piece piece)
    {
        if (!PieceCollision(1, 0, piece.ActiveTetromino))
        {
            PieceUndraw(piece);
            piece.x++;
            PieceDraw(piece);
        }
    }

    private void PieceMoveLeft(Piece piece)
    {
        if (!PieceCollision(-1, 0, piece.ActiveTetromino))
        {
            PieceUndraw(piece);
            piece.x--;
            PieceDraw(piece);
        }
    }

    private void PieceRotate(Piece piece)
    {
        var tetrominoN = (piece.TetrominoPieceN + 1) % piece.TetrominoPiece.Length;
        var nextPattern = piece.TetrominoPiece[tetrominoN];
        var kick = 0;

        if (PieceCollision(0, 0, nextPattern))
        {
            if (piece.x > COL / 2)
            {
                // it's the right wall
                kick = -1;
            }
            else
            {
                // it's the left wall
                kick = 1;
            }
        }

        if (!PieceCollision(kick, 0, nextPattern))
        {
            PieceUndraw(piece);
            piece.x += kick;
            piece.TetrominoPieceN = tetrominoN;
            piece.ActiveTetromino = piece.TetrominoPiece[tetrominoN];
            PieceDraw(piece);
        }
    }


    private void PieceLock(Piece piece)
    {
        bool breakLoops = false;

        for (int r = 0; r < piece.ActiveTetromino.GetLength(0); r++)
        {
            for (int c = 0; c < piece.ActiveTetromino.GetLength(1); c++)
            {
                if (piece.ActiveTetromino[r, c] == 0)   //skip the vacant squares
                    continue;

                // pieces to lock on top = game over
                if (piece.y + r < 0)
                {
                    module.InvokeVoidAsync("PlayAudio", "GameOverAudio", "GameOverAudioSource", baseUrl + "sounds/tetris/gameover.wav");
                    module.InvokeVoidAsync("StopAudio", "MainGameAudio");
                    gameOver = true;
                    breakLoops = true;
                    break;
                }
                board[piece.y + r, piece.x + c] = piece.Color;
            }
            if (breakLoops) break;
        }


        // remove full row
        if (!gameOver)
        {
            for (int r = 0; r < ROW; r++)
            {
                bool isRowFull = true;
                for (int c = 0; c < COL; c++)
                {
                    isRowFull = isRowFull && (board[r, c] != VACANT);
                }

                if (isRowFull)
                {
                    module.InvokeVoidAsync("PlayAudio", "ClearAudio", "ClearAudioSource", baseUrl + "sounds/tetris/clear.wav");
                    // Row is Full, we will move down all the rows above it
                    for (int y = r; y > 1; y--)
                    {
                        for (int c = 0; c < COL; c++)
                        {
                            board[y, c] = board[y - 1, c];
                        }
                    }

                    // the top row baord[0,..] has no row above it
                    for (int c = 0; c < COL; c++)
                    {
                        board[0, c] = VACANT;
                    }

                    score += levelUpPoints;
                    if (score % 20 == 0)
                    {
                        module.InvokeVoidAsync("PlayAudio", "LevelUpAudio", "LevelUpAudioSource", baseUrl + "sounds/tetris/success.wav");
                        levelUpPoints += 10;
                        if (speed > 200) 
                            speed -= 100;
                        timer.Change(speed, speed);
                    }
                }
            }
            drawBoard();
        }
        else
        {
            ctx.FillStyleAsync("Cornsilk");
            ctx.FillRectAsync(0, 150, 400, 70);
            ctx.StrokeAsync("DarkKhaki");
            ctx.StrokeRectAsync(0, 150, 400, 70);
            ctx.FontAsync("35px Comic Sans MS");
            ctx.TextAlignAsync(TextAlign.Center);
            ctx.FillStyleAsync(0, 0, 200, 0, (0, "magenta"), (0.5, "blue"), (1.0, "red"));
            ctx.FillTextAsync("Game Over", 100, 200);
        }
    }

    private bool PieceCollision(int x, int y, int[,] tetromino)
    {
        for (int r = 0; r < tetromino.GetLength(0); r++)
        {
            for (int c = 0; c < tetromino.GetLength(1); c++)
            {
                //if the square is empty, we skip it
                if (tetromino[r, c] == 0)
                    continue;

                int newX = gamePiece.x + c + x;
                int newY = gamePiece.y + r + y;


                // conditions
                if (newX < 0 || newX >= COL || newY >= ROW)
                    return true;

                // skip if newY < 0; board[-1] will crush our game
                if (newY < 0)
                    continue;

                // check if there is locked piece already in place
                if (board[newY, newX] != VACANT)
                    return true;

            }
        }
        return false;
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
